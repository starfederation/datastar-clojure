;; This is auto-generated by Datastar. DO NOT EDIT.
(ns starfederation.datastar.clojure.consts)


(def datastar-key                  "datastar")
(def version                       "1.0.0-RC.1")


;; -----------------------------------------------------------------------------
;; Default durations
;; -----------------------------------------------------------------------------
(def default-sse-retry-duration
  "The default duration for retrying SSE on connection reset. This is part of the underlying retry mechanism of SSE."
  1000)


;; -----------------------------------------------------------------------------
;; Default values
;; -----------------------------------------------------------------------------

;; -----------------------------------------------------------------------------
;; Dataline literals
;; -----------------------------------------------------------------------------
(def selector-dataline-literal "selector ")
(def mode-dataline-literal "mode ")
(def elements-dataline-literal "elements ")
(def use-view-transition-dataline-literal "useViewTransition ")
(def signals-dataline-literal "signals ")
(def only-if-missing-dataline-literal "onlyIfMissing ")


;; -----------------------------------------------------------------------------
;; Default booleans
;; -----------------------------------------------------------------------------
(def default-elements-use-view-transitions
  "Should elements be patched using the ViewTransition API?"
  false)

(def default-patch-signals-only-if-missing
  "Should a given set of signals patch if they are missing?"
  false)



;; -----------------------------------------------------------------------------
;; Enums
;; -----------------------------------------------------------------------------
;; ElementPatchMode

(def element-patch-mode-outer
  "Morphs the element into the existing element."
  "outer")

(def element-patch-mode-inner
  "Replaces the inner HTML of the existing element."
  "inner")

(def element-patch-mode-remove
  "Removes the existing element."
  "remove")

(def element-patch-mode-replace
  "Replaces the existing element with the new element."
  "replace")

(def element-patch-mode-prepend
  "Prepends the element inside to the existing element."
  "prepend")

(def element-patch-mode-append
  "Appends the element inside the existing element."
  "append")

(def element-patch-mode-before
  "Inserts the element before the existing element."
  "before")

(def element-patch-mode-after
  "Inserts the element after the existing element."
  "after")


(def default-element-patch-mode
  "Default value for ElementPatchMode.
  Morphs the element into the existing element."
  element-patch-mode-outer)


;; EventType

(def event-type-patch-elements
  "An event for patching HTML elements into the DOM."
  "datastar-patch-elements")

(def event-type-patch-signals
  "An event for patching signals."
  "datastar-patch-signals")
